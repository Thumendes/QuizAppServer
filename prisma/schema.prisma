// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id @default(uuid())
  name         String
  username     String
  email        String
  password     String
  authToken    String?
  status       UserStatus     @default(PENDING)
  answers      Answer[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cofirmTokens ConfirmToken[]
}

model ConfirmToken {
  id     String             @id @default(uuid())
  email  String
  userId String
  code   String
  status ConfirmTokenStatus @default(PENDING)
  user   User               @relation(fields: [userId], references: [id])
}

model Quiz {
  id          String     @id @default(uuid())
  name        String
  description String
  questions   Question[]
  answers     Answer[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id        String           @id @default(uuid())
  title     String
  quizId    String
  quiz      Quiz             @relation(fields: [quizId], references: [id])
  images    QuestionImage[]
  options   QuestionOption[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model QuestionImage {
  id         String   @id @default(uuid())
  title      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuestionOption {
  id         String   @id @default(uuid())
  title      String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Answer {
  id        String   @id @default(uuid())
  result    Int
  userId    String
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  PENDING
  CONFIRMED
}

enum ConfirmTokenStatus {
  PENDING
  IGNORED
  CONFIRMED
}
